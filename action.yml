# action.yml
name: Proxmox LaunchPad
description: Manage Proxmox Containers for your Repository.
author: maxklema
branding:
  icon: 'package'
  color: 'purple'

inputs:
  github_event_name:
    required: true
  github_repository:
    required: true
  github_repository_owner:
    required: true
  github_ref_name:
    required: true
  proxmox_username:
    required: true
  proxmox_password:
    required: true
  container_password:
    required: true
  public_key:
    required: false
  http_port:
    required: false
  deploy_on_start:
    required: false
  project_root:
    required: false
  require_env_vars:
    required: false
  container_env_vars:
    required: false
  install_command:
    required: false
  build_command:
    required: false
  start_command:
    required: false
  runtime_language:
    required: false
  require_services:
    required: false
  services:
    required: false
  custom_services:
    required: false
  linux_distribution:
    required: true
  multi_component:
    required: false
  root_start_command:
    required: false
  github_pat:
    required: true
  create_runner_job:
    required: false
  
    
runs:
  using: "composite"
  steps:
  
    - name: Git Ref basename
      shell: bash
      id: ref-basename
      run: |
        BRANCH=$(basename ${{ inputs.github_ref_name}} )
        echo "BRANCH_NAME=$BRANCH" >> $GITHUB_OUTPUT
        
    - name: Create Runner (If Needed)
      shell: bash
      id: create-runner
      env:
         CONTAINER_NAME: ${{ inputs.github_repository }}-${{ inputs.github_repository_owner }}-${{ steps.ref-basename.outputs.BRANCH_NAME }}
         CONTAINER_PASSWORD: ${{ inputs.container_password }}
         PROXMOX_USERNAME: ${{ inputs.proxmox_username }}
         PROXMOX_PASSWORD: ${{ inputs.proxmox_password }}
         GITHUB_PAT: ${{ inputs.github_pat }}
         LINUX_DISTRIBUTION: ${{ inputs.linux_distribution }}
         CREATE_RUNNER_JOB: ${{ inputs.create_runner_job }}
         PROJECT_REPOSITORY: https://github.com/${{ inputs.github_repository_owner }}/${{ inputs.github_repository }}
      run: |
        CONTAINER_NAME=${CONTAINER_NAME,,}
        RESPONSE=$(curl --location https://api.github.com/repos/${{ inputs.github_repository_owner }}/${{ inputs.github_repository }}/actions/runners --header "Authorization: token $GITHUB_PAT")
        
        while read -r RUN; do
            RUNNER_NAME=$(echo "$RUN" | jq -r '.name')
            if [ "$RUNNER_NAME" == "$CONTAINER_NAME" ]; then
              if [ "${CREATE_RUNNER_JOB^^}" == "N" ]; then
                  exit 0 #Runner exists, continue to next steps
              else
                  echo "STOP_SCRIPT=true" >> $GITHUB_OUTPUT
                  exit 0 # Runner exists, continue to next job.
              fi
            fi
        done < <(echo "$RESPONSE" | jq -c '.runners[]')

        echo "Creating a Runner..."
        set +e
        sshpass -p 'mie123!' ssh \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -o SendEnv="CONTAINER_NAME CONTAINER_PASSWORD PROXMOX_USERNAME PROXMOX_PASSWORD GITHUB_PAT LINUX_DISTRIBUTION PROJECT_REPOSITORY" \
          setup-runner@opensource.mieweb.org

        EXIT_STATUS=$?
      
        # Exit if a container exists by an associated runner does not.
        if [ $EXIT_STATUS != 3 ]; then
          echo "You do not have a github runner called $CONTAINER_NAME to run this action. Add one to your container and then retry the script."
          exit 1
        fi

        echo "STOP_SCRIPT=true" >> $GITHUB_OUTPUT
        
    - name: Container Creation for Branch (If Needed)
      id: create-lxc
      shell: bash
      env:
        GITHUB_EVENT: ${{ inputs.github_event_name }}
        CONTAINER_NAME: ${{ inputs.github_repository }}-${{ inputs.github_repository_owner }}-${{ steps.ref-basename.outputs.BRANCH_NAME }}
        CONTAINER_PASSWORD: ${{ inputs.container_password }}
        PROXMOX_USERNAME: ${{ inputs.proxmox_username }}
        PROXMOX_PASSWORD: ${{ inputs.proxmox_password }}
        PUBLIC_KEY: ${{ inputs.public_key }}
        HTTP_PORT: ${{ inputs.http_port }}
        DEPLOY_ON_START: ${{ inputs.deploy_on_start }}
        PROJECT_REPOSITORY: https://github.com/${{ inputs.github_repository_owner }}/${{ inputs.github_repository }}
        PROJECT_BRANCH: ${{ steps.ref-basename.outputs.BRANCH_NAME }}
        PROJECT_ROOT: ${{ inputs.project_root }}
        REQUIRE_ENV_VARS: ${{ inputs.require_env_vars }}
        CONTAINER_ENV_VARS: ${{ inputs.container_env_vars }}
        INSTALL_COMMAND: ${{ inputs.install_command }}
        START_COMMAND: ${{ inputs.start_command }}
        BUILD_COMMAND:  ${{ inputs.build_command }}
        RUNTIME_LANGUAGE: ${{ inputs.runtime_language }}
        REQUIRE_SERVICES: ${{ inputs.require_services }}
        SERVICES: ${{ inputs.services }}
        CUSTOM_SERVICES: ${{ inputs.custom_services }}
        LINUX_DISTRIBUTION: ${{ inputs.linux_distribution }}
        MULTI_COMPONENT: ${{ inputs.multi_component }}
        ROOT_START_COMMAND: ${{ inputs.root_start_command }}
        GITHUB_PAT: ${{ inputs.github_pat }}
        GH_ACTION: y
      if: ${{ inputs.github_event_name == 'create' || inputs.github_event_name == 'push' }}
      run: |
        CONTAINER_NAME=${CONTAINER_NAME,,}
        STOP_SCRIPT=${{ steps.create-runner.outputs.STOP_SCRIPT }}
        if [ "$STOP_SCRIPT" != true ]; then
          set +e
          echo "Running Container Exists..."
          ssh -i /root/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o SendEnv="PROXMOX_USERNAME PROXMOX_PASSWORD CONTAINER_NAME PROJECT_REPOSITORY" \
            container-exists@10.15.0.4
          CONTAINER_EXISTS=$?
          if [ $CONTAINER_EXISTS -eq 1 ]; then
            exit 1 # User does not own the container
          elif [ $CONTAINER_EXISTS -eq 0 ]; then
              echo "Cloning repository based on $PROJECT_BRANCH branch."
            
              ssh -i /root/.ssh/id_rsa \
               -o StrictHostKeyChecking=no \
               -o UserKnownHostsFile=/dev/null \
               -o SendEnv="CONTAINER_NAME CONTAINER_PASSWORD PROXMOX_USERNAME PROXMOX_PASSWORD HTTP_PORT DEPLOY_ON_START PROJECT_REPOSITORY PROJECT_BRANCH PROJECT_ROOT REQUIRE_ENV_VARS CONTAINER_ENV_VARS INSTALL_COMMAND START_COMMAND RUNTIME_LANGUAGE REQUIRE_SERVICES SERVICES CUSTOM_SERVICES LINUX_DISTRIBUTION MULTI_COMPONENT ROOT_START_COMMAND GH_ACTION GITHUB_PAT" \
               create-container@10.15.0.4 
              
              echo "CONTAINER_CREATED=true" >> $GITHUB_OUTPUT
              exit $?
          fi
        fi
  
    - name: Container Update on Branch Push
      shell: bash
      env:
        GITHUB_EVENT: ${{ inputs.github_event_name }}
        CONTAINER_NAME: ${{ inputs.github_repository }}-${{ inputs.github_repository_owner }}-${{ steps.ref-basename.outputs.BRANCH_NAME }}
        PROXMOX_USERNAME: ${{ inputs.proxmox_username }}
        PROXMOX_PASSWORD: ${{ inputs.proxmox_password }}
        PROJECT_REPOSITORY: https://github.com/${{ inputs.github_repository_owner }}/${{ inputs.github_repository }}
        PROJECT_BRANCH: ${{ steps.ref-basename.outputs.BRANCH_NAME }}
        PROJECT_ROOT: ${{ inputs.project_root }}
        INSTALL_COMMAND: ${{ inputs.install_command }}
        START_COMMAND: ${{ inputs.start_command }}
        BUILD_COMMAND:  ${{ inputs.build_command }}
        RUNTIME_LANGUAGE: ${{ inputs.runtime_language }}
        MULTI_COMPONENT: ${{ inputs.multi_component }}
        DEPLOY_ON_START: ${{ inputs.deploy_on_start }}
        ROOT_START_COMMAND: ${{ inputs.root_start_command }}
        GITHUB_PAT: ${{ inputs.github_pat }}
      if: ${{ inputs.github_event_name == 'push' && steps.create-lxc.outputs.CONTAINER_CREATED != 'true' }}
      run: |
        CONTAINER_NAME=${CONTAINER_NAME,,}
        STOP_SCRIPT=${{ steps.create-runner.outputs.STOP_SCRIPT }}
        if [ "$STOP_SCRIPT" != true ]; then
          ssh -i /root/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o SendEnv="CONTAINER_NAME PROXMOX_USERNAME PROXMOX_PASSWORD PROJECT_REPOSITORY PROJECT_BRANCH PROJECT_ROOT INSTALL_COMMAND START_COMMAND BUILD_COMMAND RUNTIME_LANGUAGE MULTI_COMPONENT ROOT_START_COMMAND DEPLOY_ON_START" \
            update-container@10.15.0.4
          exit $?
        fi

    - name: Container Deletion on Branch Deletion (Check)
      shell: bash
      env:
        GITHUB_EVENT: ${{ inputs.github_event_name }}
        CONTAINER_NAME: ${{ inputs.github_repository }}-${{ inputs.github_repository_owner }}-${{ steps.ref-basename.outputs.BRANCH_NAME }}
        PROXMOX_USERNAME: ${{ inputs.proxmox_username }}
        PROXMOX_PASSWORD: ${{ inputs.proxmox_password }}
        PROJECT_REPOSITORY: https://github.com/${{ inputs.github_repository_owner }}/${{ inputs.github_repository }}
        GITHUB_PAT: ${{ inputs.github_pat }}
      if: ${{ inputs.github_event_name == 'delete' }}
      run: |
        CONTAINER_NAME=${CONTAINER_NAME,,}
        STOP_SCRIPT=${{ steps.create-runner.outputs.STOP_SCRIPT }}
        if [ "$STOP_SCRIPT" != true ]; then
          ssh -i /root/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o SendEnv="PROXMOX_USERNAME PROXMOX_PASSWORD CONTAINER_NAME GITHUB_PAT PROJECT_REPOSITORY" \
            delete-container@10.15.0.4
          exit $?
        fi
