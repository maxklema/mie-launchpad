# action.yml
name: Proxmox LaunchPad
description: Manage Proxmox Containers for your Repository.
author: maxklema
branding:
  icon: "package"
  color: "purple"

inputs:
  proxmox_username:
    required: true
  proxmox_password:
    required: true
  container_password:
    required: false
  public_key:
    required: false
  http_port:
    required: false
  project_root:
    required: false
  container_env_vars:
    required: false
  install_command:
    required: false
  build_command:
    required: false
  start_command:
    required: false
  runtime_language:
    required: false
  services:
    required: false
  custom_services:
    required: false
  linux_distribution:
    required: false
  multi_component:
    required: false
  root_start_command:
    required: false
  github_pat:
    required: false

runs:
  using: "composite"
  steps:
    - name: Check if action should run
      shell: bash
      id: should-run
      env:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_EVENT_CREATED: ${{ github.event.created }}
      run: |
        if [[ "$GITHUB_EVENT_NAME" != "push" ]] || [[ "$GITHUB_EVENT_CREATED" == "false" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
        else
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "Skipping action: Push event with created=true"
        fi
    
    - name: Create Runner (If Needed)
      shell: bash
      id: create-runner
      if: steps.should-run.outputs.should_run == 'true'
      env:
        GITHUB_REPOSITORY_FULL: ${{ github.repository }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        CONTAINER_PASSWORD: ${{ inputs.container_password }}
        PROXMOX_USERNAME: ${{ inputs.proxmox_username }}
        PROXMOX_PASSWORD: ${{ inputs.proxmox_password }}
        GITHUB_PAT: ${{ inputs.github_pat }}
        GITHUB_API: ${{ github.api_url }}
        LINUX_DISTRIBUTION: ${{ inputs.linux_distribution }}
        PROJECT_REPOSITORY: ${{ github.server_url }}/${{ github.repository }}
        GITHUB_JOB: ${{ github.job }}
      run: |
        REPO_NAME=$(basename "$GITHUB_REPOSITORY_FULL")
        CONTAINER_NAME="${GITHUB_REPOSITORY_OWNER}-${REPO_NAME}-${GITHUB_REF_NAME}"
        CONTAINER_NAME=${CONTAINER_NAME,,}
        CONTAINER_NAME=$(echo "$CONTAINER_NAME" | sed 's/[^a-z0-9-]/-/g')
        export CONTAINER_NAME

        # Auto-detect if this is a runner setup job based on job name or if no container inputs are provided
        CREATE_RUNNER_JOB="N"
        if [[ "$GITHUB_JOB" == *"setup"* ]] || [[ "$GITHUB_JOB" == *"runner"* ]]; then
          CREATE_RUNNER_JOB="Y"
        fi

        if [ ! -z "$GITHUB_PAT" ]; then
          RESPONSE=$(curl --location ${GITHUB_API}/repos/${GITHUB_REPOSITORY_OWNER}/${REPO_NAME}/actions/runners --header "Authorization: token $GITHUB_PAT")

          while read -r RUN; do
              RUNNER_NAME=$(echo "$RUN" | jq -r '.name')
              if [ "$RUNNER_NAME" == "$CONTAINER_NAME" ]; then
                if [ "${CREATE_RUNNER_JOB^^}" == "N" ]; then
                    exit 0 #Runner exists, continue to next steps
                else
                    echo "STOP_SCRIPT=true" >> $GITHUB_OUTPUT
                    exit 0 # Runner exists, continue to next job.
                fi
              fi
          done < <(echo "$RESPONSE" | jq -c '.runners[]')

          echo "Creating a Runner..."
          set +e
          sshpass -p 'mie123!' ssh \
            -T \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o SendEnv="CONTAINER_NAME CONTAINER_PASSWORD PROXMOX_USERNAME PROXMOX_PASSWORD GITHUB_PAT LINUX_DISTRIBUTION PROJECT_REPOSITORY" \
            setup-runner@opensource.mieweb.org

          EXIT_STATUS=$?

          # Exit if a container exists but an associated runner does not.
          if [ $EXIT_STATUS != 3 ]; then
            echo "You do not have a github runner called $CONTAINER_NAME to run this action. Add one to your container and then retry the script."
            exit 1
          fi

          echo "STOP_SCRIPT=true" >> $GITHUB_OUTPUT
        fi

    - name: Container Creation for Branch (If Needed)
      id: create-lxc
      shell: bash
      if: ${{ (github.event_name == 'create' || github.event_name == 'push') && steps.should-run.outputs.should_run == 'true' }}
      env:
        GITHUB_EVENT: ${{ github.event_name }}
        GITHUB_REPOSITORY_FULL: ${{ github.repository }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        CONTAINER_PASSWORD: ${{ inputs.container_password }}
        PROXMOX_USERNAME: ${{ inputs.proxmox_username }}
        PROXMOX_PASSWORD: ${{ inputs.proxmox_password }}
        PUBLIC_KEY: ${{ inputs.public_key }}
        HTTP_PORT: ${{ inputs.http_port }}
        DEPLOY_ON_START: ${{ inputs.deploy_on_start }}
        PROJECT_REPOSITORY: ${{ github.server_url }}/${{ github.repository }}
        PROJECT_BRANCH: ${{ github.ref_name }}
        PROJECT_ROOT: ${{ inputs.project_root }}
        REQUIRE_ENV_VARS: ${{ inputs.require_env_vars }}
        CONTAINER_ENV_VARS: ${{ inputs.container_env_vars }}
        INSTALL_COMMAND: ${{ inputs.install_command }}
        START_COMMAND: ${{ inputs.start_command }}
        BUILD_COMMAND: ${{ inputs.build_command }}
        RUNTIME_LANGUAGE: ${{ inputs.runtime_language }}
        REQUIRE_SERVICES: ${{ inputs.require_services }}
        SERVICES: ${{ inputs.services }}
        CUSTOM_SERVICES: ${{ inputs.custom_services }}
        LINUX_DISTRIBUTION: ${{ inputs.linux_distribution }}
        MULTI_COMPONENT: ${{ inputs.multi_component }}
        ROOT_START_COMMAND: ${{ inputs.root_start_command }}
        GITHUB_PAT: ${{ inputs.github_pat }}
        GH_ACTION: y
      run: |
        REPO_NAME=$(basename "$GITHUB_REPOSITORY_FULL")
        CONTAINER_NAME="${GITHUB_REPOSITORY_OWNER}-${REPO_NAME}-${GITHUB_REF_NAME}"
        CONTAINER_NAME=${CONTAINER_NAME,,}
        CONTAINER_NAME=$(echo "$CONTAINER_NAME" | sed 's/[^a-z0-9-]/-/g')
        export CONTAINER_NAME
        STOP_SCRIPT=${{ steps.create-runner.outputs.STOP_SCRIPT }}
        if [ "$STOP_SCRIPT" != "true" ]; then
          set +e
          echo "Running Container Exists..."
          
          # Determine SSH target based on network location
          EXTERNAL_IP=$(dig +short opensource.mieweb.org)
          if [ "$EXTERNAL_IP" = "10.15.20.69" ]; then
            SSH_TARGET="10.15.0.4"
          else
            SSH_TARGET="opensource.mieweb.org"
          fi
          
          sshpass -p 'mie123!' ssh \
            -T \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o SendEnv="PROXMOX_USERNAME PROXMOX_PASSWORD CONTAINER_NAME PROJECT_REPOSITORY" \
            container-exists@$SSH_TARGET
          CONTAINER_EXISTS=$?
          if [ $CONTAINER_EXISTS -eq 1 ]; then
            exit 1 # User does not own the container
          elif [ $CONTAINER_EXISTS -eq 0 ]; then
              echo "Cloning repository based on $PROJECT_BRANCH branch."

              sshpass -p 'mie123!' ssh \
               -T \
               -o StrictHostKeyChecking=no \
               -o UserKnownHostsFile=/dev/null \
               -o SendEnv="CONTAINER_NAME CONTAINER_PASSWORD PROXMOX_USERNAME PUBLIC_KEY PROXMOX_PASSWORD HTTP_PORT DEPLOY_ON_START PROJECT_REPOSITORY PROJECT_BRANCH PROJECT_ROOT REQUIRE_ENV_VARS CONTAINER_ENV_VARS INSTALL_COMMAND START_COMMAND RUNTIME_LANGUAGE REQUIRE_SERVICES SERVICES CUSTOM_SERVICES LINUX_DISTRIBUTION MULTI_COMPONENT ROOT_START_COMMAND GH_ACTION GITHUB_PAT" \
               create-container@$SSH_TARGET 
              
              echo "CONTAINER_CREATED=true" >> $GITHUB_OUTPUT
              exit $?
          fi
        fi

    - name: Container Update on Branch Push
      shell: bash
      if: ${{ (github.event_name == 'push' && steps.create-lxc.outputs.CONTAINER_CREATED != 'true') && steps.should-run.outputs.should_run == 'true' }}
      env:
        GITHUB_EVENT: ${{ github.event_name }}
        GITHUB_REPOSITORY_FULL: ${{ github.repository }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        PROXMOX_USERNAME: ${{ inputs.proxmox_username }}
        PROXMOX_PASSWORD: ${{ inputs.proxmox_password }}
        PROJECT_REPOSITORY: ${{ github.server_url }}/${{ github.repository }}
        PROJECT_BRANCH: ${{ github.ref_name }}
        PROJECT_ROOT: ${{ inputs.project_root }}
        INSTALL_COMMAND: ${{ inputs.install_command }}
        START_COMMAND: ${{ inputs.start_command }}
        BUILD_COMMAND: ${{ inputs.build_command }}
        RUNTIME_LANGUAGE: ${{ inputs.runtime_language }}
        MULTI_COMPONENT: ${{ inputs.multi_component }}
        SERVICES: ${{ inputs.services }}
        CUSTOM_SERVICES: ${{ inputs.custom_services }}
        REQUIRE_SERVICES: ${{ inputs.require_services }}
        LINUX_DISTRIBUTION: ${{ inputs.linux_distribution }}
        DEPLOY_ON_START: ${{ inputs.deploy_on_start }}
        ROOT_START_COMMAND: ${{ inputs.root_start_command }}
        GITHUB_PAT: ${{ inputs.github_pat }}
        GH_ACTION: y
      run: |
        REPO_NAME=$(basename "$GITHUB_REPOSITORY_FULL")
        CONTAINER_NAME="${GITHUB_REPOSITORY_OWNER}-${REPO_NAME}-${GITHUB_REF_NAME}"
        CONTAINER_NAME=${CONTAINER_NAME,,}
        CONTAINER_NAME=$(echo "$CONTAINER_NAME" | sed 's/[^a-z0-9-]/-/g')
        export CONTAINER_NAME
        echo "$LINUX_DISTRIBUTION"
        STOP_SCRIPT=${{ steps.create-runner.outputs.STOP_SCRIPT }}
        if [ "$STOP_SCRIPT" != true ]; then
          # Determine SSH target based on network location
          EXTERNAL_IP=$(dig +short opensource.mieweb.org)
          if [ "$EXTERNAL_IP" = "10.15.20.69" ]; then
            SSH_TARGET="10.15.0.4"
          else
            SSH_TARGET="opensource.mieweb.org"
          fi
          
          sshpass -p 'mie123!' ssh \
            -T \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o SendEnv="CONTAINER_NAME PROXMOX_USERNAME PROXMOX_PASSWORD PROJECT_REPOSITORY PROJECT_BRANCH PROJECT_ROOT INSTALL_COMMAND START_COMMAND BUILD_COMMAND RUNTIME_LANGUAGE MULTI_COMPONENT ROOT_START_COMMAND DEPLOY_ON_START SERVICES CUSTOM_SERVICES REQUIRE_SERVICES LINUX_DISTRIBUTION GH_ACTION" \
            update-container@$SSH_TARGET
          exit $?
        fi

    - name: Container Deletion on Branch Deletion (Check)
      shell: bash
      if: ${{ github.event_name == 'delete' && steps.should-run.outputs.should_run == 'true' }}
      env:
        GITHUB_EVENT: ${{ github.event_name }}
        GITHUB_REPOSITORY_FULL: ${{ github.repository }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        PROXMOX_USERNAME: ${{ inputs.proxmox_username }}
        PROXMOX_PASSWORD: ${{ inputs.proxmox_password }}
        PROJECT_REPOSITORY: ${{ github.server_url }}/${{ github.repository }}
        GITHUB_PAT: ${{ inputs.github_pat }}
      run: |
        REPO_NAME=$(basename "$GITHUB_REPOSITORY_FULL")
        CONTAINER_NAME="${GITHUB_REPOSITORY_OWNER}-${REPO_NAME}-${GITHUB_REF_NAME}"
        CONTAINER_NAME=${CONTAINER_NAME,,}
        CONTAINER_NAME=$(echo "$CONTAINER_NAME" | sed 's/[^a-z0-9-]/-/g')
        export CONTAINER_NAME
        STOP_SCRIPT=${{ steps.create-runner.outputs.STOP_SCRIPT }}
        if [ "$STOP_SCRIPT" != true ]; then
          # Determine SSH target based on network location
          EXTERNAL_IP=$(dig +short opensource.mieweb.org)
          if [ "$EXTERNAL_IP" = "10.15.20.69" ]; then
            SSH_TARGET="10.15.0.4"
          else
            SSH_TARGET="opensource.mieweb.org"
          fi
          
          sshpass -p 'mie123!' ssh \
            -T \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o SendEnv="PROXMOX_USERNAME PROXMOX_PASSWORD CONTAINER_NAME GITHUB_PAT PROJECT_REPOSITORY" \
            delete-container@$SSH_TARGET
          exit $?
        fi
